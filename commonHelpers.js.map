{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["'use strict';\n\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimeInput = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\n\nlet userSelectedDate;\nlet timerInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < Date.now()) {\n      iziToast.warning({\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimeInput, options);\n\nstartButton.addEventListener('click', event => {\n  const days = document.querySelector('[data-days]'),\n    hours = document.querySelector('[data-hours]'),\n    minutes = document.querySelector('[data-minutes]'),\n    seconds = document.querySelector('[data-seconds]');\n\n  startButton.disabled = true;\n  datetimeInput.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const currentDate = Date.now();\n    const distance = userSelectedDate - currentDate;\n    const timerData = convertMs(distance);\n\n    if (distance < 0) {\n      clearInterval(timerInterval);\n      datetimeInput.disabled = false;\n      return;\n    }\n\n    days.textContent = addLeadingZero(timerData.days);\n    hours.textContent = addLeadingZero(timerData.hours);\n    minutes.textContent = addLeadingZero(timerData.minutes);\n    seconds.textContent = addLeadingZero(timerData.seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["datetimeInput","startButton","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","event","days","hours","minutes","seconds","currentDate","distance","timerData","convertMs","addLeadingZero","ms","value"],"mappings":"0IAQA,MAAMA,EAAgB,SAAS,cAAc,kBAAkB,EACzDC,EAAc,SAAS,cAAc,cAAc,EAEzD,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,KAAK,OAC1BI,EAAS,QAAQ,CACf,SAAU,WACV,QAAS,oCACjB,CAAO,EACDL,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAM,EAAUP,EAAeI,CAAO,EAEhCH,EAAY,iBAAiB,QAASO,GAAS,CAC7C,MAAMC,EAAO,SAAS,cAAc,aAAa,EAC/CC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAU,SAAS,cAAc,gBAAgB,EACjDC,EAAU,SAAS,cAAc,gBAAgB,EAEnDX,EAAY,SAAW,GACvBD,EAAc,SAAW,GAEzBG,EAAgB,YAAY,IAAM,CAChC,MAAMU,EAAc,KAAK,MACnBC,EAAWZ,EAAmBW,EAC9BE,EAAYC,EAAUF,CAAQ,EAEpC,GAAIA,EAAW,EAAG,CAChB,cAAcX,CAAa,EAC3BH,EAAc,SAAW,GACzB,MACD,CAEDS,EAAK,YAAcQ,EAAeF,EAAU,IAAI,EAChDL,EAAM,YAAcO,EAAeF,EAAU,KAAK,EAClDJ,EAAQ,YAAcM,EAAeF,EAAU,OAAO,EACtDH,EAAQ,YAAcK,EAAeF,EAAU,OAAO,CACvD,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMT,EAAO,KAAK,MAAMS,EAAK,KAAG,EAC1BR,EAAQ,KAAK,MAAOQ,EAAK,MAAO,IAAI,EACpCP,EAAU,KAAK,MAAQO,EAAK,MAAO,KAAQ,GAAM,EACjDN,EAAU,KAAK,MAASM,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASK,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}